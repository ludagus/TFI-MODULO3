create table
  users(
    id uuid references auth.users not null primary key,
    email text unique not null,
    full_name text,
    avatar_url text
  );

alter table 
  users enable row level security;

create policy
  "Can view own user data." on users for
select 
  using (auth.uid()=id);

create policy
  "Can view upade user data." on users for
update
  using (auth.uid()=id);

create
or replace function public.handle_new_user() returns trigger as $$
begin
  if new.raw_user_meta_data ->>'avatar_url' is null or new.raw_user_meta_data ->>'avatar_url'='' then
    new.raw_user_meta_data = jsonb_set(new.raw_user_meta_data, '{avatar_url}','"https://unsplash.com/es/fotos/fotografia-de-enfoque-superficial-de-mujer-al-aire-libre-durante-el-dia-rDEOVtE7vOs"':: jsonb);
  end if;

  insert into public.users(id, email, full_name, avatar_url)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;

$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row 
    execute procedure  public.handle_new_user();